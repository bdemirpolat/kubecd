// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	models "github.com/bdemirpolat/kubecd/models"
	mock "github.com/stretchr/testify/mock"
)

// RepoInterface is an autogenerated mock type for the RepoInterface type
type RepoInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *RepoInterface) Create(_a0 *models.Application) (uint, error) {
	ret := _m.Called(_a0)

	var r0 uint
	if rf, ok := ret.Get(0).(func(*models.Application) uint); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Application) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *RepoInterface) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *RepoInterface) Get(id uint) (*models.Application, error) {
	ret := _m.Called(id)

	var r0 *models.Application
	if rf, ok := ret.Get(0).(func(uint) *models.Application); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: page, limit
func (_m *RepoInterface) List(page int, limit int) (*[]models.Application, error) {
	ret := _m.Called(page, limit)

	var r0 *[]models.Application
	if rf, ok := ret.Get(0).(func(int, int) *[]models.Application); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *RepoInterface) Update(_a0 *models.Application) (uint, error) {
	ret := _m.Called(_a0)

	var r0 uint
	if rf, ok := ret.Get(0).(func(*models.Application) uint); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Application) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
